import { useEffect, useState, useRef } from "react";
import { useLocation } from "react-router-dom";
import { MessageCircle, Plus, Search, Filter, Users, Calendar, MapPin, ChevronDown, ChevronUp, ThumbsUp, X, Send, Reply } from "lucide-react";
import Swal from 'sweetalert2';
import {
     Section,
     Container,
     Card,
     CardContent,
     CardHeader,
     CardTitle,
     Button,
     Input,
     Textarea,
     Badge,
     Select,
     SelectContent,
     SelectItem,
     SelectTrigger,
     SelectValue,
     DatePicker,
} from "../../components/ui";
import { useAuth } from "../../contexts/AuthContext";
import { seedCommunityPostsOnce, listCommunityPosts, joinCommunityPost, listJoinsByPost } from "../../utils/communityStore";

export default function Community() {
     const locationRouter = useLocation();
     const { user } = useAuth();
     const [searchQuery, setSearchQuery] = useState("");
     const [selectedCategory, setSelectedCategory] = useState("all");
     const [tab, setTab] = useState("feed"); // feed | find-match
     const [filterLocation, setFilterLocation] = useState("");
     const [filterDate, setFilterDate] = useState("");
     const [communityPosts, setCommunityPosts] = useState([]);
     const [showCreatePost, setShowCreatePost] = useState(false);
     const [newPost, setNewPost] = useState({ title: "", content: "", category: "general", image: "" });
     const [expandedPosts, setExpandedPosts] = useState(new Set());
     const [likedPosts, setLikedPosts] = useState(new Set());
     const [bookmarkedPosts, setBookmarkedPosts] = useState(new Set());
     const [selectedPost, setSelectedPost] = useState(null);
     const [showPostModal, setShowPostModal] = useState(false);
     const [newComment, setNewComment] = useState("");
     const [replyingTo, setReplyingTo] = useState(null);
     const [likedComments, setLikedComments] = useState(new Set());
     const [highlightPostId, setHighlightPostId] = useState(null);
     const highlightRef = useRef(null);

     // Accept navigation state to focus a specific post and tab
     useEffect(() => {
          const st = locationRouter?.state || {};
          if (st.tab) setTab(st.tab);
          if (st.highlightPostId) setHighlightPostId(st.highlightPostId);
     }, [locationRouter?.state]);

     // Auto scroll to highlighted post
     useEffect(() => {
          if (!highlightPostId) return;
          if (highlightRef.current) {
               highlightRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
               const timer = setTimeout(() => setHighlightPostId(null), 6000);
               return () => clearTimeout(timer);
          }
     }, [highlightPostId]);

    // Observe end for infinite scroll (moved below slices)

     const categories = [
          { id: "all", name: "T·∫•t c·∫£", icon: "üìù" },
          { id: "tips", name: "M·∫πo ch∆°i", icon: "üí°" },
          { id: "tournament", name: "Gi·∫£i ƒë·∫•u", icon: "üèÜ" },
          { id: "equipment", name: "Trang thi·∫øt b·ªã", icon: "‚öΩ" },
          { id: "health", name: "S·ª©c kh·ªèe", icon: "üí™" },
          { id: "general", name: "Th·∫£o lu·∫≠n", icon: "üí¨" }
     ];

     // Seed demo community posts on first load
     useEffect(() => { seedCommunityPostsOnce(); }, []);

     useEffect(() => {
          setCommunityPosts(listCommunityPosts({ location: filterLocation, date: filterDate }));
     }, [filterLocation, filterDate, showCreatePost]);

     const posts = [
          {
               id: 1,
               title: "Gi·∫£i ph·ªßi cu·ªëi tu·∫ßn t·∫°i TP.HCM",
               content: "Tu·∫ßn n√†y c√≥ nhi·ªÅu gi·∫£i ƒë·∫•u ph·ªßi th√∫ v·ªã t·∫°i c√°c qu·∫≠n trung t√¢m. ƒê·∫∑c bi·ªát c√≥ gi·∫£i ƒë·∫•u t·∫°i s√¢n ABC v·ªõi gi·∫£i th∆∞·ªüng h·∫•p d·∫´n. C√°c b·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω tham gia ƒë·ªÉ c√≥ c∆° h·ªôi giao l∆∞u v√† thi ƒë·∫•u v·ªõi nhi·ªÅu ƒë·ªôi kh√°c nhau.",
               author: { name: "BallSpot", avatar: "https://ui-avatars.com/api/?name=BallSpot&background=0ea5e9&color=fff&size=100", role: "Admin" },
               date: "2025-01-15",
               category: "tournament",
               likes: 24,
               comments: 8,
               shares: 3,
               image: "https://images.unsplash.com/photo-1574629810360-7efbbe195018?w=800&h=400&fit=crop",
               tags: ["gi·∫£i ƒë·∫•u", "TP.HCM", "ph·ªßi"]
          },
          {
               id: 2,
               title: "M·∫πo ƒë√° s√¢n 7 ng∆∞·ªùi hi·ªáu qu·∫£",
               content: "S√¢n 7 ng∆∞·ªùi ƒë√≤i h·ªèi s·ª± c√¢n b·∫±ng gi·ªØa th·ªÉ l·ª±c v√† chi·∫øn thu·∫≠t. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë m·∫πo quan tr·ªçng:\n\n1. Ki·ªÉm so√°t b√≥ng t·ªët h∆°n\n2. Di chuy·ªÉn kh√¥ng b√≥ng\n3. Ph·ªëi h·ª£p nh√≥m\n4. T·∫≠n d·ª•ng kh√¥ng gian\n\nC√°c b·∫°n c√≥ kinh nghi·ªám g√¨ kh√°c kh√¥ng?",
               author: { name: "Coach Minh", avatar: "https://ui-avatars.com/api/?name=Coach+Minh&background=10b981&color=fff&size=100", role: "Hu·∫•n luy·ªán vi√™n" },
               date: "2025-01-14",
               category: "tips",
               likes: 45,
               comments: 12,
               shares: 7,
               image: "https://images.unsplash.com/photo-1501612780327-45045538702b?w=800&h=400&fit=crop",
               tags: ["chi·∫øn thu·∫≠t", "s√¢n 7", "m·∫πo"]
          },
          {
               id: 3,
               title: "Ch·ªçn gi√†y ƒë√° b√≥ng ph√π h·ª£p theo m·∫∑t s√¢n",
               content: "Vi·ªác ch·ªçn gi√†y ph√π h·ª£p r·∫•t quan tr·ªçng ƒë·ªÉ tr√°nh ch·∫•n th∆∞∆°ng v√† tƒÉng hi·ªáu su·∫•t thi ƒë·∫•u. C√°c lo·∫°i m·∫∑t s√¢n kh√°c nhau c·∫ßn lo·∫°i gi√†y kh√°c nhau:\n\n- S√¢n c·ªè t·ª± nhi√™n: gi√†y c√≥ gai d√†i\n- S√¢n c·ªè nh√¢n t·∫°o: gi√†y c√≥ gai ng·∫Øn\n- S√¢n trong nh√†: gi√†y ƒë·∫ø ph·∫≥ng\n\nB·∫°n ƒë√£ t·ª´ng g·∫∑p v·∫•n ƒë·ªÅ g√¨ v·ªõi gi√†y kh√¥ng ph√π h·ª£p ch∆∞a?",
               author: { name: "Thi·∫øt b·ªã Pro", avatar: "https://ui-avatars.com/api/?name=Thiet+Bi+Pro&background=f59e0b&color=fff&size=100", role: "Chuy√™n gia" },
               date: "2025-01-13",
               category: "equipment",
               likes: 32,
               comments: 15,
               shares: 4,
               image: "https://images.unsplash.com/photo-1599050751795-5fa78f5c9c23?w=800&h=400&fit=crop",
               tags: ["gi√†y", "trang thi·∫øt b·ªã", "an to√†n"]
          },
          {
               id: 4,
               title: "Kh·ªüi ƒë·ªông ƒë√∫ng c√°ch tr∆∞·ªõc khi thi ƒë·∫•u",
               content: "Kh·ªüi ƒë·ªông ƒë√∫ng c√°ch gi√∫p gi·∫£m nguy c∆° ch·∫•n th∆∞∆°ng v√† tƒÉng hi·ªáu su·∫•t thi ƒë·∫•u. Quy tr√¨nh kh·ªüi ƒë·ªông n√™n bao g·ªìm:\n\n1. Ch·∫°y nh·∫π 5-10 ph√∫t\n2. Gi√£n c∆° ƒë·ªông\n3. B√†i t·∫≠p v·ªõi b√≥ng\n4. Ch·∫°y n∆∞·ªõc r√∫t ng·∫Øn\n\nC√°c b·∫°n c√≥ b√†i t·∫≠p kh·ªüi ƒë·ªông n√†o hi·ªáu qu·∫£ kh√¥ng?",
               author: { name: "Physio Team", avatar: "https://ui-avatars.com/api/?name=Physio+Team&background=ef4444&color=fff&size=100", role: "B√°c sƒ© th·ªÉ thao" },
               date: "2025-01-12",
               category: "health",
               likes: 28,
               comments: 9,
               shares: 6,
               image: "https://images.unsplash.com/photo-1476480862126-209bfaa8edc8?w=800&h=400&fit=crop",
               tags: ["kh·ªüi ƒë·ªông", "s·ª©c kh·ªèe", "ch·∫•n th∆∞∆°ng"]
          },
          {
               id: 5,
               title: "T√¨m ƒë·ªôi ch∆°i c√πng khu v·ª±c",
               content: "M√¨nh ƒëang t√¨m ƒë·ªôi ƒë·ªÉ ch∆°i th∆∞·ªùng xuy√™n t·∫°i qu·∫≠n 7. C√≥ ai quan t√¢m kh√¥ng? Ch√∫ng ta c√≥ th·ªÉ t·ªï ch·ª©c c√°c tr·∫≠n ƒë·∫•u v√†o cu·ªëi tu·∫ßn.",
               author: { name: "Nguy·ªÖn VƒÉn A", avatar: "https://ui-avatars.com/api/?name=Nguyen+Van+A&background=8b5cf6&color=fff&size=100", role: "Ng∆∞·ªùi ch∆°i" },
               date: "2025-01-11",
               category: "general",
               likes: 15,
               comments: 5,
               shares: 2,
               image: "",
               tags: ["t√¨m ƒë·ªôi", "qu·∫≠n 7", "cu·ªëi tu·∫ßn"]
          }
     ];

     // Mock comments data
     const comments = [
          {
               id: 1,
               postId: 1,
               author: { name: "Nguy·ªÖn VƒÉn B", avatar: "https://ui-avatars.com/api/?name=Nguyen+Van+B&background=10b981&color=fff&size=100" },
               content: "Gi·∫£i ƒë·∫•u n√†y c√≥ v·∫ª th√∫ v·ªã! M√¨nh c√≥ th·ªÉ tham gia ƒë∆∞·ª£c kh√¥ng?",
               date: "2025-01-15T10:30:00",
               likes: 5,
               replies: [
                    {
                         id: 11,
                         author: { name: "BallSpot", avatar: "https://ui-avatars.com/api/?name=BallSpot&background=0ea5e9&color=fff&size=100" },
                         content: "Ch√†o b·∫°n! B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω t·∫°i link n√†y: https://example.com",
                         date: "2025-01-15T11:00:00",
                         likes: 2
                    }
               ]
          },
          {
               id: 2,
               postId: 1,
               author: { name: "Tr·∫ßn Th·ªã C", avatar: "https://ui-avatars.com/api/?name=Tran+Thi+C&background=f59e0b&color=fff&size=100" },
               content: "M√¨nh ƒë√£ tham gia gi·∫£i n√†y nƒÉm ngo√°i, r·∫•t vui v√† c√≥ nhi·ªÅu ƒë·ªôi m·∫°nh!",
               date: "2025-01-15T14:20:00",
               likes: 8,
               replies: []
          },
          {
               id: 3,
               postId: 2,
               author: { name: "L√™ VƒÉn D", avatar: "https://ui-avatars.com/api/?name=Le+Van+D&background=ef4444&color=fff&size=100" },
               content: "C·∫£m ∆°n coach ƒë√£ chia s·∫ª! M√¨nh s·∫Ω √°p d·ª•ng nh·ªØng m·∫πo n√†y v√†o tr·∫≠n ƒë·∫•u cu·ªëi tu·∫ßn.",
               date: "2025-01-14T16:45:00",
               likes: 12,
               replies: [
                    {
                         id: 31,
                         author: { name: "Coach Minh", avatar: "https://ui-avatars.com/api/?name=Coach+Minh&background=10b981&color=fff&size=100" },
                         content: "Ch√∫c b·∫°n thi ƒë·∫•u t·ªët! Nh·ªõ kh·ªüi ƒë·ªông k·ªπ tr∆∞·ªõc khi ƒë√° nh√©.",
                         date: "2025-01-14T17:30:00",
                         likes: 6
                    }
               ]
          }
     ];

     const filteredPosts = posts.filter(post => {
          const matchesSearch = post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
               post.content.toLowerCase().includes(searchQuery.toLowerCase());
          const matchesCategory = selectedCategory === "all" || post.category === selectedCategory;
          return matchesSearch && matchesCategory;
     });

     // Infinite scroll slices
     const [feedPage, setFeedPage] = useState(1);
     const [matchPage, setMatchPage] = useState(1);
     const pageSize = 10;
     const feedEndRef = useRef(null);
     const matchEndRef = useRef(null);
     const visibleFeedPosts = filteredPosts.slice(0, feedPage * pageSize);
     const visibleCommunityPosts = communityPosts.slice(0, matchPage * pageSize);

     // Observe end for feed infinite scroll
     useEffect(() => {
          if (tab !== "feed") return;
          const el = feedEndRef.current;
          if (!el) return;
          const io = new IntersectionObserver((entries) => {
               entries.forEach((e) => {
                    if (e.isIntersecting) {
                         setFeedPage((p) => (visibleFeedPosts.length >= filteredPosts.length ? p : p + 1));
                    }
               });
          }, { root: null, threshold: 0.1 });
          io.observe(el);
          return () => io.disconnect();
     }, [tab, filteredPosts.length, visibleFeedPosts.length]);

     // Observe end for match infinite scroll
     useEffect(() => {
          if (tab !== "find-match") return;
          const el = matchEndRef.current;
          if (!el) return;
          const io = new IntersectionObserver((entries) => {
               entries.forEach((e) => {
                    if (e.isIntersecting) {
                         setMatchPage((p) => (visibleCommunityPosts.length >= communityPosts.length ? p : p + 1));
                    }
               });
          }, { root: null, threshold: 0.1 });
          io.observe(el);
          return () => io.disconnect();
     }, [tab, communityPosts.length, visibleCommunityPosts.length]);

     const togglePostExpansion = (postId) => {
          const newExpanded = new Set(expandedPosts);
          if (newExpanded.has(postId)) {
               newExpanded.delete(postId);
          } else {
               newExpanded.add(postId);
          }
          setExpandedPosts(newExpanded);
     };

     const toggleLike = (postId) => {
          const newLiked = new Set(likedPosts);
          if (newLiked.has(postId)) {
               newLiked.delete(postId);
          } else {
               newLiked.add(postId);
          }
          setLikedPosts(newLiked);
     };

     const toggleBookmark = (postId) => {
          const newBookmarked = new Set(bookmarkedPosts);
          if (newBookmarked.has(postId)) {
               newBookmarked.delete(postId);
          } else {
               newBookmarked.add(postId);
          }
          setBookmarkedPosts(newBookmarked);
     };

     const handleCreatePost = () => {
          if (!newPost.title || !newPost.content) return;

          // Here you would typically send the post to your backend
          console.log("Creating new post:", newPost);

          // Reset form
          setNewPost({ title: "", content: "", category: "general", image: "" });
          setShowCreatePost(false);
     };

     const openPostModal = (post) => {
          setSelectedPost(post);
          setShowPostModal(true);
          setNewComment("");
          setReplyingTo(null);
     };

     const closePostModal = () => {
          setShowPostModal(false);
          setSelectedPost(null);
          setNewComment("");
          setReplyingTo(null);
     };

     const handleAddComment = () => {
          if (!newComment.trim()) return;

          // Here you would typically send the comment to your backend
          console.log("Adding comment:", {
               postId: selectedPost.id,
               content: newComment,
               replyingTo: replyingTo
          });

          setNewComment("");
          setReplyingTo(null);
     };

     const toggleCommentLike = (commentId) => {
          const newLiked = new Set(likedComments);
          if (newLiked.has(commentId)) {
               newLiked.delete(commentId);
          } else {
               newLiked.add(commentId);
          }
          setLikedComments(newLiked);
     };

     const getPostComments = (postId) => {
          return comments.filter(comment => comment.postId === postId);
     };

     const PostCard = ({ post }) => {
          const isExpanded = expandedPosts.has(post.id);
          const isLiked = likedPosts.has(post.id);
          const isBookmarked = false;
          const categoryInfo = categories.find(cat => cat.id === post.category);

          // Community join (simple demo using local store)

          const handleJoin = () => {
               if (!user) return alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ tham gia.");
               joinCommunityPost({ postId: post.postId || `CP-${post.id}`, userId: user.id });
               alert("ƒê√£ g·ª≠i y√™u c·∫ßu tham gia");
          };

          return (
               <Card className="mb-6 hover:shadow-lg transition-shadow duration-300">
                    <CardHeader className="pb-3">
                         <div className="flex items-start justify-between">
                              <div className="flex items-center space-x-3">
                                   <img
                                        src={post.author.avatar}
                                        alt={post.author.name}
                                        className="w-12 h-12 rounded-full object-cover"
                                   />
                                   <div>
                                        <div className="flex items-center space-x-2">
                                             <h3 className="font-semibold text-gray-900">{post.author.name}</h3>
                                             <Badge variant="secondary" className="text-xs">
                                                  {post.author.role}
                                             </Badge>
                                        </div>
                                        <div className="flex items-center text-sm text-gray-500 space-x-2">
                                             <Calendar className="w-4 h-4" />
                                             <span>{new Date(post.date).toLocaleDateString('vi-VN')}</span>
                                             <Badge variant="outline" className="text-xs">
                                                  {categoryInfo?.icon} {categoryInfo?.name}
                                             </Badge>
                                        </div>
                                   </div>
                              </div>
                              <div className="hidden" />
                         </div>
                    </CardHeader>

                    <CardContent>
                         <h2 className="text-xl font-bold text-gray-900 mb-3 cursor-pointer hover:text-teal-600"
                              onClick={() => openPostModal(post)}>
                              {post.title}
                         </h2>

                         <div className={`text-gray-700 leading-relaxed ${isExpanded ? '' : 'line-clamp-3'}`}>
                              {post.content.split('\n').map((paragraph, index) => (
                                   <p key={index} className="mb-2">{paragraph}</p>
                              ))}
                         </div>

                         {post.content.split('\n').length > 3 && (
                              <Button
                                   variant="ghost"
                                   className="mt-2 p-0 h-auto text-teal-600 hover:text-teal-700"
                                   onClick={() => togglePostExpansion(post.id)}
                              >
                                   {isExpanded ? (
                                        <>
                                             <ChevronUp className="w-4 h-4 mr-1" />
                                             Thu g·ªçn
                                        </>
                                   ) : (
                                        <>
                                             <ChevronDown className="w-4 h-4 mr-1" />
                                             Xem th√™m
                                        </>
                                   )}
                              </Button>
                         )}

                         {post.image && (
                              <div className="mt-4">
                                   <img
                                        src={post.image}
                                        alt={post.title}
                                        className="w-full h-64 object-cover rounded-lg"
                                   />
                              </div>
                         )}

                         <div className="flex flex-wrap gap-2 mt-4">
                              {post.tags.map((tag, index) => (
                                   <Badge key={index} variant="outline" className="text-xs">
                                        #{tag}
                                   </Badge>
                              ))}
                         </div>

                         <div className="flex items-center justify-between mt-6 pt-4 border-t">
                              <div className="flex items-center space-x-6">
                                   <Button
                                        variant="ghost"
                                        className={`flex items-center space-x-2 ${isLiked ? 'text-teal-600' : 'text-gray-500'}`}
                                        onClick={() => toggleLike(post.id)}
                                   >
                                        <ThumbsUp className={`w-5 h-5 ${isLiked ? 'fill-current' : ''}`} />
                                        <span>{post.likes + (isLiked ? 1 : 0)}</span>
                                   </Button>
                                   <Button
                                        variant="ghost"
                                        className="flex items-center space-x-2 text-gray-500 hover:text-teal-600"
                                        onClick={() => openPostModal(post)}
                                   >
                                        <MessageCircle className="w-5 h-5" />
                                        <span>{post.comments}</span>
                                   </Button>
                                   <div className="hidden" />
                              </div>
                              {/* Join/Apply demo */}
                              {post.postId && (
                                   <div className="flex items-center gap-2">
                                        <Button onClick={handleJoin} className="bg-teal-500 hover:bg-teal-600 text-white">Tham gia</Button>
                                   </div>
                              )}
                         </div>
                    </CardContent>
               </Card>
          );
     };

     return (
          <Section className="min-h-screen bg-gray-50">
               <Container className="py-8">
                    {/* Header */}
                    <div className="mb-8">
                         <div className="flex items-center justify-between mb-6">
                              <div>
                                   <h1 className="text-3xl font-bold text-gray-900 mb-2">C·ªông ƒë·ªìng b√≥ng ƒë√°</h1>
                                   <p className="text-gray-600">Chia s·∫ª kinh nghi·ªám, k·∫øt n·ªëi v√† h·ªçc h·ªèi c√πng nhau</p>
                              </div>
                              <Button
                                   onClick={() => {
                                        if (!user) {
                                             Swal.fire({ icon: 'warning', title: 'Y√™u c·∫ßu ƒëƒÉng nh·∫≠p', text: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o b√†i vi·∫øt.', confirmButtonText: 'ƒê·ªìng √Ω' });
                                             return;
                                        }
                                        setShowCreatePost(true);
                                   }}
                                   className="bg-teal-500 hover:bg-teal-600 text-white px-6 py-3 rounded-lg font-semibold flex items-center space-x-2"
                              >
                                   <Plus className="w-5 h-5" />
                                   <span>T·∫°o b√†i vi·∫øt</span>
                              </Button>
                         </div>

                         {/* Tabs */}
                         <div className="flex items-center gap-2 mb-6">
                              <Button type="button" onClick={() => setTab("feed")} className={`px-4 py-2 rounded-xl ${tab === "feed" ? "bg-teal-500 text-white" : "bg-teal-50 text-teal-700 border border-teal-200"}`}>B·∫£ng tin</Button>
                              <Button type="button" onClick={() => setTab("find-match")} className={`px-4 py-2 rounded-xl ${tab === "find-match" ? "bg-teal-500 text-white" : "bg-teal-50 text-teal-700 border border-teal-200"}`}>T√¨m ƒë·ªëi th·ªß</Button>
                         </div>

                         {tab === "feed" ? (
                              <div className="flex flex-col md:flex-row gap-4 mb-6">
                                   <div className="flex-1 relative">
                                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                                        <Input
                                             placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
                                             value={searchQuery}
                                             onChange={(e) => setSearchQuery(e.target.value)}
                                             className="pl-10"
                                        />
                                   </div>
                                   <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                                        <SelectTrigger className="w-full md:w-48">
                                             <Filter className="w-4 h-4 mr-2" />
                                             <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                                        </SelectTrigger>
                                        <SelectContent>
                                             {categories.map(category => (
                                                  <SelectItem key={category.id} value={category.id}>
                                                       {category.icon} {category.name}
                                                  </SelectItem>
                                             ))}
                                        </SelectContent>
                                   </Select>
                              </div>
                         ) : (
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-6 bg-white/70 p-3 rounded-2xl border border-teal-100">
                                   <div className="md:col-span-1">
                                        <Input placeholder="ƒê·ªãa ƒëi·ªÉm (v√≠ d·ª•: Qu·∫≠n 7)" value={filterLocation} onChange={(e) => setFilterLocation(e.target.value)} />
                                   </div>
                                   <div className="md:col-span-1">
                                        <DatePicker value={filterDate} onChange={setFilterDate} />
                                   </div>
                                   <div className="md:col-span-1 flex items-center justify-end text-sm text-gray-600">
                                        <span className="inline-flex items-center gap-2 bg-teal-50 border border-teal-100 px-3 py-2 rounded-xl">
                                             <span className="w-2 h-2 rounded-full bg-teal-500"></span>
                                             {communityPosts.length} b√†i ph√π h·ª£p
                                        </span>
                                   </div>
                              </div>
                         )}
                    </div>

                    <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
                         {/* Main Content */}
                         <div className="lg:col-span-3">
                              {/* Stats hidden: not mapped to DB */}

                              {tab === "feed" ? (
                                   visibleFeedPosts.length > 0 ? (
                                        <>
                                             {visibleFeedPosts.map(post => <PostCard key={post.id} post={post} />)}
                                             <div ref={feedEndRef} className="h-6" />
                                        </>
                                   ) : (
                                        <Card>
                                             <CardContent className="p-12 text-center">
                                                  <div className="text-gray-400 mb-4">
                                                       <Search className="w-16 h-16 mx-auto" />
                                                  </div>
                                                  <h3 className="text-xl font-semibold text-gray-600 mb-2">Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt</h3>
                                                  <p className="text-gray-500">Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm ho·∫∑c danh m·ª•c</p>
                                             </CardContent>
                                        </Card>
                                   )
                              ) : (
                                   <div className="space-y-4">
                                        {visibleCommunityPosts.map((cp) => (
                                             <Card
                                                  key={cp.postId}
                                                  ref={highlightPostId === cp.postId ? highlightRef : null}
                                                  className={`border transition-all duration-200 ${highlightPostId === cp.postId ? "border-emerald-500 ring-2 ring-emerald-200" : "border-teal-100 hover:shadow-lg"}`}
                                             >
                                                  <CardContent className="p-4">
                                                       <div className="flex items-start justify-between">
                                                            <div>
                                                                 <div className="flex items-center gap-3 mb-1">
                                                                      <div className="w-8 h-8 rounded-full bg-teal-100 flex items-center justify-center text-teal-700 font-bold text-sm border border-teal-200">
                                                                           {(cp.authorName || "?").slice(0, 1)}
                                                                      </div>
                                                                      <div className="font-semibold text-teal-800">{cp.content}</div>
                                                                 </div>
                                                                 <div className="text-sm text-gray-600 flex items-center gap-3 flex-wrap">
                                                                      <span className="inline-flex items-center gap-1 bg-teal-50 border border-teal-100 text-teal-700 px-2 py-1 rounded-full" title={cp.location || ""}><MapPin className="w-4 h-4" /> {cp.location || "‚Äî"}</span>
                                                                      <span className="inline-flex items-center gap-1 bg-gray-50 border border-gray-200 text-gray-700 px-2 py-1 rounded-full"><Calendar className="w-4 h-4" /> {(cp.date && cp.slotName) ? `${cp.date} ‚Ä¢ ${cp.slotName}` : (cp.time || "‚Äî")}</span>
                                                                      {cp.authorName && (
                                                                           <span className="inline-flex items-center gap-1 bg-gray-50 border border-gray-200 text-gray-700 px-2 py-1 rounded-full">
                                                                                <Users className="w-4 h-4" /> {cp.authorName}
                                                                                <span className="ml-1 inline-flex items-center text-[10px] font-semibold bg-emerald-100 text-emerald-700 px-1.5 py-0.5 rounded">Ch·ªß b√†i</span>
                                                                           </span>
                                                                      )}
                                                                 </div>
                                                                 <div className="mt-2 text-xs text-gray-600 flex items-center gap-3 flex-wrap">
                                                                      {cp.location && (
                                                                           <a
                                                                                href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(cp.location)}`}
                                                                                target="_blank"
                                                                                rel="noreferrer"
                                                                                className="underline text-teal-700 hover:text-teal-800"
                                                                           >Xem b·∫£n ƒë·ªì</a>
                                                                      )}
                                                                      {cp.bookingId && (
                                                                           <span className="inline-flex items-center gap-1 bg-gray-50 border border-gray-200 text-gray-700 px-2 py-0.5 rounded-full">#Booking: {cp.bookingId}</span>
                                                                      )}
                                                                 </div>
                                                            </div>
                                                            <div className="flex items-center gap-2">
                                                                 {highlightPostId === cp.postId && (
                                                                      <Badge variant="secondary" className="bg-emerald-500 text-white">M·ªõi</Badge>
                                                                 )}
                                                                 {user?.id === cp.userId ? (
                                                                      <Button disabled className="bg-gray-200 text-gray-500 cursor-not-allowed">B√†i c·ªßa b·∫°n</Button>
                                                                 ) : (
                                                                      <Button onClick={() => {
                                                                           if (!user) { Swal.fire({ icon: 'warning', title: 'Y√™u c·∫ßu ƒëƒÉng nh·∫≠p', text: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ tham gia.', confirmButtonText: 'ƒê·ªìng √Ω' }); return; }
                                                                           const existing = listJoinsByPost(cp.postId).find(j => j.userId === user.id);
                                                                           if (existing) {
                                                                                Swal.fire({ toast: true, position: 'top-end', timer: 1800, showConfirmButton: false, icon: 'info', title: 'B·∫°n ƒë√£ y√™u c·∫ßu tr∆∞·ªõc ƒë√≥' });
                                                                                return;
                                                                           }
                                                                           joinCommunityPost({ postId: cp.postId, userId: user.id });
                                                                           Swal.fire({ toast: true, position: 'top-end', timer: 1800, showConfirmButton: false, icon: 'success', title: 'ƒê√£ g·ª≠i y√™u c·∫ßu tham gia' });
                                                                      }} className="bg-teal-500 hover:bg-teal-600 text-white">Tham gia</Button>
                                                                 )}
                                                            </div>
                                                       </div>
                                                  </CardContent>
                                             </Card>
                                        ))}
                                        <div ref={matchEndRef} className="h-6" />
                                        {communityPosts.length === 0 && (
                                             <Card>
                                                  <CardContent className="p-8 text-center text-gray-600">Kh√¥ng c√≥ b√†i t√¨m ƒë·ªëi th·ªß ph√π h·ª£p</CardContent>
                                             </Card>
                                        )}
                                   </div>
                              )}
                         </div>

                         {/* Sidebar hidden (not mapped to DB) */}
                         <div className="hidden lg:col-span-1" />
                    </div>

                    {/* Create Post Modal */}
                    {showCreatePost && (
                         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                              <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                                   <CardHeader>
                                        <div className="flex items-center justify-between">
                                             <CardTitle>T·∫°o b√†i vi·∫øt m·ªõi</CardTitle>
                                             <Button
                                                  variant="ghost"
                                                  size="icon"
                                                  onClick={() => setShowCreatePost(false)}
                                             >
                                                  <X className="w-4 h-4" />
                                             </Button>
                                        </div>
                                   </CardHeader>
                                   <CardContent className="space-y-4">
                                        <div>
                                             <label className="block text-sm font-medium text-gray-700 mb-2">
                                                  Ti√™u ƒë·ªÅ
                                             </label>
                                             <Input
                                                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                                                  value={newPost.title}
                                                  onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}
                                             />
                                        </div>

                                        <div>
                                             <label className="block text-sm font-medium text-gray-700 mb-2">
                                                  Danh m·ª•c
                                             </label>
                                             <Select value={newPost.category} onValueChange={(value) => setNewPost({ ...newPost, category: value })}>
                                                  <SelectTrigger>
                                                       <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                                                  </SelectTrigger>
                                                  <SelectContent>
                                                       {categories.filter(cat => cat.id !== "all").map(category => (
                                                            <SelectItem key={category.id} value={category.id}>
                                                                 {category.icon} {category.name}
                                                            </SelectItem>
                                                       ))}
                                                  </SelectContent>
                                             </Select>
                                        </div>

                                        <div>
                                             <label className="block text-sm font-medium text-gray-700 mb-2">
                                                  N·ªôi dung
                                             </label>
                                             <Textarea
                                                  placeholder="Chia s·∫ª suy nghƒ© c·ªßa b·∫°n..."
                                                  value={newPost.content}
                                                  onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}
                                                  rows={6}
                                             />
                                        </div>

                                        <div>
                                             <label className="block text-sm font-medium text-gray-700 mb-2">
                                                  H√¨nh ·∫£nh (t√πy ch·ªçn)
                                             </label>
                                             <Input
                                                  placeholder="URL h√¨nh ·∫£nh..."
                                                  value={newPost.image}
                                                  onChange={(e) => setNewPost({ ...newPost, image: e.target.value })}
                                             />
                                        </div>

                                        <div className="flex justify-end space-x-3 pt-4">
                                             <Button
                                                  variant="outline"
                                                  onClick={() => setShowCreatePost(false)}
                                             >
                                                  H·ªßy
                                             </Button>
                                             <Button
                                                  onClick={handleCreatePost}
                                                  disabled={!newPost.title || !newPost.content}
                                             >
                                                  ƒêƒÉng b√†i
                                             </Button>
                                        </div>
                                   </CardContent>
                              </Card>
                         </div>
                    )}

                    {/* Post Detail Modal */}
                    {showPostModal && selectedPost && (
                         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                              <div className="w-full max-w-4xl max-h-[90vh] overflow-hidden bg-white rounded-lg flex flex-col">
                                   {/* Modal Header */}
                                   <div className="flex items-center justify-between p-6 border-b">
                                        <h2 className="text-2xl font-bold text-gray-900">Chi ti·∫øt b√†i vi·∫øt</h2>
                                        <Button
                                             variant="ghost"
                                             size="icon"
                                             onClick={closePostModal}
                                        >
                                             <X className="w-6 h-6" />
                                        </Button>
                                   </div>

                                   {/* Modal Content */}
                                   <div className="flex-1 overflow-y-auto">
                                        <div className="p-6">
                                             {/* Post Header */}
                                             <div className="flex items-start justify-between mb-6">
                                                  <div className="flex items-center space-x-3">
                                                       <img
                                                            src={selectedPost.author.avatar}
                                                            alt={selectedPost.author.name}
                                                            className="w-12 h-12 rounded-full object-cover"
                                                       />
                                                       <div>
                                                            <div className="flex items-center space-x-2">
                                                                 <h3 className="font-semibold text-gray-900">{selectedPost.author.name}</h3>
                                                                 <Badge variant="secondary" className="text-xs">
                                                                      {selectedPost.author.role}
                                                                 </Badge>
                                                            </div>
                                                            <div className="flex items-center text-sm text-gray-500 space-x-2">
                                                                 <Calendar className="w-4 h-4" />
                                                                 <span>{new Date(selectedPost.date).toLocaleDateString('vi-VN')}</span>
                                                                 <Badge variant="outline" className="text-xs">
                                                                      {categories.find(cat => cat.id === selectedPost.category)?.icon} {categories.find(cat => cat.id === selectedPost.category)?.name}
                                                                 </Badge>
                                                            </div>
                                                       </div>
                                                  </div>
                                                  <div className="hidden" />
                                             </div>

                                             {/* Post Content */}
                                             <div className="mb-6">
                                                  <h1 className="text-3xl font-bold text-gray-900 mb-4">{selectedPost.title}</h1>
                                                  <div className="text-gray-700 leading-relaxed text-lg">
                                                       {selectedPost.content.split('\n').map((paragraph, index) => (
                                                            <p key={index} className="mb-4">{paragraph}</p>
                                                       ))}
                                                  </div>

                                                  {selectedPost.image && (
                                                       <div className="mt-6">
                                                            <img
                                                                 src={selectedPost.image}
                                                                 alt={selectedPost.title}
                                                                 className="w-full h-96 object-cover rounded-lg"
                                                            />
                                                       </div>
                                                  )}

                                                  <div className="flex flex-wrap gap-2 mt-6">
                                                       {selectedPost.tags.map((tag, index) => (
                                                            <Badge key={index} variant="outline" className="text-sm">
                                                                 #{tag}
                                                            </Badge>
                                                       ))}
                                                  </div>
                                             </div>

                                             {/* Post Actions */}
                                             <div className="flex items-center justify-between py-4 border-t border-b">
                                                  <div className="flex items-center space-x-6">
                                                       <Button
                                                            variant="ghost"
                                                            className={`flex items-center space-x-2 ${likedPosts.has(selectedPost.id) ? 'text-teal-600' : 'text-gray-500'}`}
                                                            onClick={() => toggleLike(selectedPost.id)}
                                                       >
                                                            <ThumbsUp className={`w-5 h-5 ${likedPosts.has(selectedPost.id) ? 'fill-current' : ''}`} />
                                                            <span>{selectedPost.likes + (likedPosts.has(selectedPost.id) ? 1 : 0)}</span>
                                                       </Button>
                                                       <Button variant="ghost" className="flex items-center space-x-2 text-gray-500">
                                                            <MessageCircle className="w-5 h-5" />
                                                            <span>{getPostComments(selectedPost.id).length}</span>
                                                       </Button>
                                                       <div className="hidden" />
                                                  </div>
                                             </div>

                                             {/* Comments Section */}
                                             <div className="mt-6">
                                                  <h3 className="text-xl font-semibold text-gray-900 mb-4">
                                                       B√¨nh lu·∫≠n ({getPostComments(selectedPost.id).length})
                                                  </h3>

                                                  {/* Add Comment Form */}
                                                  <div className="mb-6">
                                                       <div className="flex items-start space-x-3">
                                                            <img
                                                                 src="https://ui-avatars.com/api/?name=You&background=0ea5e9&color=fff&size=100"
                                                                 alt="You"
                                                                 className="w-10 h-10 rounded-full object-cover"
                                                            />
                                                            <div className="flex-1">
                                                                 <Textarea
                                                                      placeholder={replyingTo ? `Tr·∫£ l·ªùi ${replyingTo}...` : "Vi·∫øt b√¨nh lu·∫≠n..."}
                                                                      value={newComment}
                                                                      onChange={(e) => setNewComment(e.target.value)}
                                                                      rows={3}
                                                                      className="resize-none"
                                                                 />
                                                                 <div className="flex items-center justify-between mt-2">
                                                                      {replyingTo && (
                                                                           <div className="flex items-center space-x-2 text-sm text-gray-500">
                                                                                <span>Tr·∫£ l·ªùi:</span>
                                                                                <span className="font-medium">{replyingTo}</span>
                                                                                <Button
                                                                                     variant="ghost"
                                                                                     size="sm"
                                                                                     onClick={() => setReplyingTo(null)}
                                                                                >
                                                                                     <X className="w-4 h-4" />
                                                                                </Button>
                                                                           </div>
                                                                      )}
                                                                      <Button
                                                                           onClick={handleAddComment}
                                                                           disabled={!newComment.trim()}
                                                                           className="bg-teal-500 hover:bg-teal-600 text-white"
                                                                      >
                                                                           <Send className="w-4 h-4 mr-2" />
                                                                           G·ª≠i
                                                                      </Button>
                                                                 </div>
                                                            </div>
                                                       </div>
                                                  </div>

                                                  {/* Comments List */}
                                                  <div className="space-y-4">
                                                       {getPostComments(selectedPost.id).map((comment) => (
                                                            <div key={comment.id} className="border-l-2 border-gray-100 pl-4">
                                                                 <div className="flex items-start space-x-3">
                                                                      <img
                                                                           src={comment.author.avatar}
                                                                           alt={comment.author.name}
                                                                           className="w-8 h-8 rounded-full object-cover"
                                                                      />
                                                                      <div className="flex-1">
                                                                           <div className="flex items-center space-x-2 mb-1">
                                                                                <span className="font-medium text-gray-900">{comment.author.name}</span>
                                                                                <span className="text-sm text-gray-500">
                                                                                     {new Date(comment.date).toLocaleDateString('vi-VN')}
                                                                                </span>
                                                                           </div>
                                                                           <p className="text-gray-700 mb-2">{comment.content}</p>
                                                                           <div className="flex items-center space-x-4">
                                                                                <Button
                                                                                     variant="ghost"
                                                                                     size="sm"
                                                                                     className={`flex items-center space-x-1 ${likedComments.has(comment.id) ? 'text-teal-600' : 'text-gray-500'}`}
                                                                                     onClick={() => toggleCommentLike(comment.id)}
                                                                                >
                                                                                     <ThumbsUp className={`w-4 h-4 ${likedComments.has(comment.id) ? 'fill-current' : ''}`} />
                                                                                     <span>{comment.likes + (likedComments.has(comment.id) ? 1 : 0)}</span>
                                                                                </Button>
                                                                                <Button
                                                                                     variant="ghost"
                                                                                     size="sm"
                                                                                     className="flex items-center space-x-1 text-gray-500"
                                                                                     onClick={() => setReplyingTo(comment.author.name)}
                                                                                >
                                                                                     <Reply className="w-4 h-4" />
                                                                                     <span>Tr·∫£ l·ªùi</span>
                                                                                </Button>
                                                                           </div>

                                                                           {/* Replies */}
                                                                           {comment.replies && comment.replies.length > 0 && (
                                                                                <div className="mt-3 ml-6 space-y-3">
                                                                                     {comment.replies.map((reply) => (
                                                                                          <div key={reply.id} className="flex items-start space-x-3">
                                                                                               <img
                                                                                                    src={reply.author.avatar}
                                                                                                    alt={reply.author.name}
                                                                                                    className="w-6 h-6 rounded-full object-cover"
                                                                                               />
                                                                                               <div className="flex-1">
                                                                                                    <div className="flex items-center space-x-2 mb-1">
                                                                                                         <span className="font-medium text-gray-900 text-sm">{reply.author.name}</span>
                                                                                                         <span className="text-xs text-gray-500">
                                                                                                              {new Date(reply.date).toLocaleDateString('vi-VN')}
                                                                                                         </span>
                                                                                                    </div>
                                                                                                    <p className="text-gray-700 text-sm mb-1">{reply.content}</p>
                                                                                                    <div className="flex items-center space-x-3">
                                                                                                         <Button
                                                                                                              variant="ghost"
                                                                                                              size="sm"
                                                                                                              className={`flex items-center space-x-1 text-xs ${likedComments.has(reply.id) ? 'text-teal-600' : 'text-gray-500'}`}
                                                                                                              onClick={() => toggleCommentLike(reply.id)}
                                                                                                         >
                                                                                                              <ThumbsUp className={`w-3 h-3 ${likedComments.has(reply.id) ? 'fill-current' : ''}`} />
                                                                                                              <span>{reply.likes + (likedComments.has(reply.id) ? 1 : 0)}</span>
                                                                                                         </Button>
                                                                                                         <Button
                                                                                                              variant="ghost"
                                                                                                              size="sm"
                                                                                                              className="flex items-center space-x-1 text-xs text-gray-500"
                                                                                                              onClick={() => setReplyingTo(reply.author.name)}
                                                                                                         >
                                                                                                              <Reply className="w-3 h-3" />
                                                                                                              <span>Tr·∫£ l·ªùi</span>
                                                                                                         </Button>
                                                                                                    </div>
                                                                                               </div>
                                                                                          </div>
                                                                                     ))}
                                                                                </div>
                                                                           )}
                                                                      </div>
                                                                 </div>
                                                            </div>
                                                       ))}
                                                  </div>
                                             </div>
                                        </div>
                                   </div>
                              </div>
                         </div>
                    )}
               </Container>
          </Section>
     );
}

